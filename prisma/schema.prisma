// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL_LOCAL")
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  role      RoleEnumType @default(USER)
  contactNo String
  address   String
  location  String
  createAt  DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  bookings  Booking[]

  @@map("users")
}

model Turf {
  id       String @id @default(uuid())
  name     String
  location String
  owner    String

  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameOffers GameOffer[]
  fields      Field[]

  @@map("turfs")
}

model GameType {
  id              String @id @default(uuid())
  name            String
  numberOfPalyers Int

  GameOffers GameOffer[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("game-types")
}

model Field {
  id   String @id @default(uuid())
  name String
  size String

  turfId     String
  turf       Turf        @relation(fields: [turfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameOffers GameOffer[]

  @@map("fields")
}

model GameOffer {
  id          String   @id @default(uuid())
  offer_time  DateTime
  offer_price Float

  turfId String
  turf   Turf   @relation(fields: [turfId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  gameTypeId String
  gameType   GameType @relation(fields: [gameTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fieldId String
  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("game-offers")
}

model Booking {
  id           String    @id @default(uuid())
  booking_time DateTime
  gameOfferId  String
  gameOffer    GameOffer @relation(fields: [gameOfferId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

enum RoleEnumType {
  ADMIN
  USER
  SUPER_ADMIN
}
